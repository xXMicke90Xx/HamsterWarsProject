
@using HamsterWars.Shared.Models
@using System.Net.Http.Headers
@using Tewr.Blazor.FileReader
@inject HttpClient client
@inject IFileReaderService fileReader;
@using HamsterWars.Client.Pages
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting





<h2>
    @LastSubmitResult
</h2>

<EditForm method="post" Model=@hamster OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted class="my-3">
    <div class="my-3">
        <DataAnnotationsValidator />

        <input @bind-value="@hamster.Name" type="text" placeholder="Name" />
        <input @bind-value="@hamster.Age" type="number" placeholder="Age" />
        <input @bind-value="@hamster.FavFood" type="text" placeholder="FavFood" />
        <input @bind-value="@hamster.Loves" type="text" placeholder="Loves" />

        <input id="ImageInput" type="file" @ref="_input" @onchange="HamsterName" accept=".jpg, .jpeg, .png" />
        



    </div>
    @if(Gallery.Changed == true)
    {
        <p>Uppdatera sidan</p>
    }
    <button class="btn btn-primary" type="submit" value="Save">Submit</button>
</EditForm>
@code {
    Hamster hamster = new Hamster();


    string LastSubmitResult;
    public EventCallback UpdateAgain { get; set; }
    IBrowserFile myFile;


    async Task ValidFormSubmitted(EditContext editContext)
    {

        await client.PostAsJsonAsync<Hamster>("HamsterGallery", hamster);
        HandleSelected();
        LastSubmitResult = "Hamster har blivit tillagd";
        Gallery.Changed = true;
        await OnInitializedAsync();


    }
    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "Fel Info";
    }

    async Task HamsterName()
    {
        foreach (var file in await fileReader.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "image", fileInfo.Name);
                    ImgUrl = await UpdateImageName(content);                    
                    await OnChange.InvokeAsync(ImgUrl);
                    hamster.ImgName = ImgUrl;

                }
            }
        }
    }

    protected async Task HandleSelected()
    {
        foreach (var file in await fileReader.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "image", fileInfo.Name);
                    ImgUrl = await UploadProductImage(content);                    
                    await OnChange.InvokeAsync(ImgUrl);
                    
                }
            }
        }
    }

    public async Task<string> UpdateImageName(MultipartFormDataContent content)
    {
        
        var postResult = await client.PostAsync("HamsterGallery/hamster/newimage", content);
        var postContent = await postResult.Content.ReadAsStringAsync();
        if (!postResult.IsSuccessStatusCode)
        {
            throw new ApplicationException(postContent);
        }
        else
        {

            return postContent;
        }
    }


    public async Task<string> UploadProductImage(MultipartFormDataContent content)
    {
        
        var postResult = await client.PostAsync("HamsterGallery/hamster/image", content);
        var postContent = await postResult.Content.ReadAsStringAsync();
        if (!postResult.IsSuccessStatusCode)
        {
            throw new ApplicationException(postContent);
        }
        else
        {

            return postContent;
        }
    }


    private ElementReference _input;

    public string ImgUrl { get; set; }

    public EventCallback<string> OnChange { get; set; }

    public IFileReaderService FileReaderService { get; set; }






   }




















