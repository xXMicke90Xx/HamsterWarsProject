@using HamsterWars.Shared.Models
@using System.Net.Http.Headers
@using Tewr.Blazor.FileReader
@inject HttpClient client
@inject IFileReaderService fileReader;
@using HamsterWars.Client.Pages
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting





<h2>
    @LastSubmitResult
</h2>

<EditForm method="post" Model=@hamster OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted class="my-3">
    <div class="my-3">
        <DataAnnotationsValidator />

        <input @bind-value="@hamster.Name" type="text" placeholder="Name" />
        <input @bind-value="@hamster.Age" type="number" placeholder="Age" />
        <input @bind-value="@hamster.FavFood" type="text" placeholder="FavFood" />
        <input @bind-value="@hamster.Loves" type="text" placeholder="Loves" />
        <input type="file" @ref="elementReference" @onchange="async () => await OpenFileAsync()" />

        @*<p>
        <button onclick="document.getElementById('tt').click()">Pick</button>
        <InputFile id="tt" OnChange="@Test" hidden multiple></InputFile>
        </p>*@
        
    </div>


    <button class="btn btn-primary" @onclick="async () => await UploadFileAsync()" type="submit" value="Save">Submit</button>
</EditForm>
@code {
    Hamster hamster = new Hamster();


    string LastSubmitResult;
    public EventCallback UpdateAgain { get; set; }

    ElementReference elementReference;
    string message = string.Empty;
    string imagePath = string.Empty;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;

    Stream fileStream = null;

    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        type = fileInfo.Type;
        hamster.ImgName = fileName;

        using (var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(memoryStream.ToArray());
        }
    }
    async Task UploadFileAsync()
    {
        string url = "";

        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form data");

        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);

        var response = await client.PostAsync($"{url}/api/FileUploads", content);
        message = "Upload Success";
    }
    void FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        LastSubmitResult =
          formIsValid
          ? "Success - form was valid"
          : "Failure - form was invalid";
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {

        await client.PostAsJsonAsync<Hamster>("HamsterGallery", hamster);
        LastSubmitResult = "Hamster har blivit tillagd";

        Gallery.Changed = true;

    }
    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "Fel Info";
    }

    async Task FileUpload(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        hamster.ImgName = imageData;
    }

}




